
template <typename T, typename U, typename = std::make_index_sequence<std::tuple_size<U>::value>>
struct is_udf_compatible;

template <typename T, typename ... Ts, std::size_t... Is>
struct is_udf_compatible<T, std::tuple<Ts...>, std::index_sequence<Is...>>
  : public std::bool_constant<std::is_convertible_v<std::tuple_element_t<Is, Ts>, std::tuple_element_t<Is, typename T::traits::Inputs>> && ...> {};


template <typename T, typename... Args, std::size_t... Is>
auto ch_udf_impl(const source_location& sloc, const Args&... args, std::index_sequence<Is...>) {
  static_assert(is_udf_type_v<T>, "invalid type");
  static_assert(sizeof...(Args) == std::tuple_size_v<typename T::traits::Inputs>, "number of inputs mismatch");
  static_assert((std::is_convertible_v<Args, std::tuple_element_t<Is, typename T::traits::Inputs>> && ...), "invalid type for input");
  auto node = createUDFNode(get_udf<T>(), {to_lnode<std::tuple_element_t<Is, typename T::traits::Inputs>>(args, sloc)...}, sloc);
  return make_type<typename T::traits::Output>(node, sloc);
}

template <typename T, typename... Args, typename = void>
auto ch_udf(const Args&... args, CH_SLOC) {
  return ch_udf_impl<T, Args...>(sloc, args..., std::make_index_sequence<sizeof...(Args)>{});
}




const auto is_sync_rom = [](memimpl* /*node*/) {
  return false/*node->is_sync_read()
      && (1 == node->ports().size())
      && (type_mrport == node->ports()[0]->type())
      && !node->ports()[0]->has_enable()*/;
};



//--
if (is_sync_rom(node)) {
  auto port = reinterpret_cast<mrportimpl*>(node->ports()[0]);
  out << "always @ (";
  this->print_cdomain(out, node->cd());
  out << ") begin" << std::endl;
  {
    auto_indent indent(out);
    out << "case (";
    this->print_name(out, port->addr().impl());
    out << ")" << std::endl;
    {
      const auto& value = node->value();
      uint32_t num_items = node->num_items();
      uint32_t addr_width = ilog2(num_items);
      uint32_t data_width = node->data_width();
      for (uint32_t i = 0; i < num_items; ++i) {
        out << addr_width << "'d" << i << ": ";
        this->print_name(out, port);
        out << " = ";
        uint32_t offset = i * data_width;
        this->print_value(out, value, true, offset, data_width);
        out << ";" << std::endl;
      }
    }
    out << "endcase" << std::endl;
  }
  out << "end" << std::endl;
  return;
}

__if (ch_clock()) {
  ch_print("{0}: *** rd={0}, wr={1}, rd_a={2}, wr_a={3}, rd_val={4}, wr_val={5}, rd_dat={6}, wr_dat={7}",
           ch_now(), reading, writing, rd_a, wr_a, io.deq.valid, io.enq.valid, io.deq.data, io.enq.data);
};

template <typename T, unsigned N>
struct ch_queue {
  using value_type = T;
  static constexpr uint32_t max_size = N;
  static constexpr uint32_t addr_width = log2ceil(N);
  static constexpr uint32_t size_width = log2ceil(N+1);
  static_assert(N > 1, "invalid size");

  __io (
    (ch_enq_io<T>) enq,
    (ch_deq_io<T>) deq,
    __out(ch_uint<size_width>) size
  );

  void describe() {
    ch_reg<ch_uint<addr_width>> rd_ptr(0), wr_ptr(0);
    ch_reg<ch_uint<size_width>> counter(0);
    ch_reg<T> data_out;

    auto reading = io.deq.ready && io.deq.valid;
    auto writing = io.enq.valid && io.enq.ready;

    rd_ptr->next = ch_sel(reading, rd_ptr + 1, rd_ptr);
    wr_ptr->next = ch_sel(writing, wr_ptr + 1, wr_ptr);

    __if (writing && !reading) {
      counter->next = counter + 1;
    }__elif (reading && !writing) {
      counter->next = counter - 1;
    };

    auto rd_a = ch_slice<addr_width>(ch_sel(reading, rd_ptr + 1, rd_ptr));
    auto wr_a = ch_slice<addr_width>(wr_ptr);

    ch_mem<T, N> mem;
    mem.write(wr_a, io.enq.data, writing);

    auto first_write = writing && (0 == counter || (1 == counter && reading));
    data_out->next = ch_sel(first_write, io.enq.data, mem.read(rd_a));

    io.deq.data  = data_out;
    io.deq.valid = (counter != 0);
    io.enq.ready = (counter != N);
    io.size      = counter;
  }
};
